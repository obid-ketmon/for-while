# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. 
# Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты вверх одной 
# и той же стороной. Выведите минимальное количество монет, которые нужно перевернуть

# def min_coin_flips(coins):
#     # Подсчитываем количество монеток, лежащих решкой (heads) и гербом (tails)
#     heads = coins.count('H')
#     tails = coins.count('T')

#     # Определяем минимальное количество монеток, которые нужно перевернуть
#     min_flips = min(heads, tails)

#     return min_flips

# # Пример использования функции с массивом монеток coins = ['H', 'T', 'H', 'H', 'T', 'T']
# coins = ['H', 'T', 'H', 'H', 'T', 'T']
# result = min_coin_flips(coins)
# print(result)

# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница.
# Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000), 
# а Катя должна их отгадать. Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их 
# произведение P. Помогите Кате отгадать задуманные Петей числа.

# def find_numbers(S, P):
#     # Ищем числа X и Y, удовлетворяющие сумме и произведению
#     for x in range(1, S + 1):
#         y = S - x
#         if x * y == P:
#             return x, y
    
#     # Если не удалось найти числа, возвращаем None
#     return None

# # Пример использования функции с суммой S = 10 и произведением P = 24
# S = 10
# P = 24
# result = find_numbers(S, P)
# print(result)


# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

def powers_of_two(N):
    powers = []
    power = 1

    while power <= N:
        powers.append(power)
        power *= 2

    return powers

# Пример использования функции с числом N = 20
N = 20
result = powers_of_two(N)
print(result)
